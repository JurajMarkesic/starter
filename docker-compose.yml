version: '3.3'

services:
  api:
    container_name: api
    build:
      context: api
      dockerfile: docker/dev/Dockerfile-api
      # target: development
    volumes:
      - ./api:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${API_PORT}:${API_PORT}
      - 9229:9229
    command: npm run start:debug
    networks:
      - api_network
    env_file: 
      - .env
    depends_on:
      - redis
      - postgres
  frontend:
    container_name: frontend
    build:
      context: frontend
      dockerfile: docker/dev/Dockerfile-frontend
      # target: development
    command: npm run dev
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    env_file: 
        - .env
    environment:
      HOST: 0.0.0.0
      PORT: ${FRONTEND_PORT}
    networks:
      - api_network
  nginx:
    container_name: nginx
    build:
      context: api
      dockerfile: docker/dev/Dockerfile-nginx
    ports:
      - 80:80
    environment:
      API_SERVER_NAME: ${API_SERVER_NAME}
      API_PREFIX: ${API_PREFIX}
      API_PORT: ${API_PORT}
      FRONTEND_PORT: ${FRONTEND_PORT}
    networks:
      - api_network
    depends_on:
      - api
      - frontend
  redis:
    container_name: redis
    image: redis:5
    networks:
      - api_network
  postgres:
    container_name: postgres
    image: postgres:12
    networks:
      - api_network
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      PG_DATA: /var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
  scope:
    image: weaveworks/scope:1.13.0
    network_mode: "host"
    pid: "host"
    privileged: true
    labels:
      - "works.weave.role=system"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    command:
      - "--probe.docker=true"
networks:
  api_network:
    driver: bridge
volumes:
  pgdata: